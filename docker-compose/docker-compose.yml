version: '3'
services: 

    #docker私有仓库 测试地址 http://你的虚拟机ip:5000/v2/
    #              查看镜像 http://localhost:5000/v2/_catalog
    #              查看镜像标签 http://localhost:5000/v2/[镜像名称]/tags/list
    #              镜像打标签：docker tag zookeeper localhost:5000/zookeeper:latest2
    #              推送镜像： docker push localhost:5000/zookeeper:latest2 
    #              删除镜像： docker exec registry rm -rf /var/lib/registry/docker/registry/v2/repositories/[image] 
    #
    registry:
        image: registry
        restart: always
        container_name: registry
        ports:
          - 5000:5000
        #volumes:
        #  - /usr/local/docker/registry/data:/var/lib/registry

    #缓存服务
    redis:
        image: redis
        command: redis-server --requirepass 111
        ports:
          - "6379:6379"
        #volumes:
        #  - ./data:/data
    
    #服务协调
    zookeeper:
        image: zookeeper
        restart: always
        ports:
          - 2181:2181

    #数据库    
    mysql:
        image: mysql
        ports:
          - 3306:3306
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        environment:
          MYSQL_ROOT_PASSWORD: 111
          
#     oracle:
#         # sid: xe
#         # username: system
#         # password: oracle
#         image: sath89/oracle-xe-11g
#         restart: always   #如果docker容器由于一些问题挂掉的化，docker-composer会自动把容器给启动起来
#         container_name: oracle  #启动之后容器的名称
#         volumes:
#           - /my-docker-data/oracle-11g/data:/u01/app/oracle
#         ports:
#           - 1521:1521


    #消息中间件   
    kafka:
        image: wurstmeister/kafka
        ports:
          - "9092:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: localhost
          KAFKA_MESSAGE_MAX_BYTES: 2000000
          KAFKA_CREATE_TOPICS: "Topic1:1:3,Topic2:1:1:compact"
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          #volumes:
          #  - ./kafka-logs:/kafka
          #  - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
          - zookeeper  

    #kafka可视化WEB管理平台 http://localhost:9000/
    kafka-manager:
          image: sheepkiller/kafka-manager
          ports:
            - 9000:9000
          environment:
            ZK_HOSTS: zookeeper:2181
    
    #分布式链路追踪
    zipkin:
      image: openzipkin/zipkin
      container_name: zipkin
      # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
      environment:
        - STORAGE_TYPE=mem
        - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        # Uncomment to disable scribe
        # - SCRIBE_ENABLED=false
        # Uncomment to enable self-tracing
        # - SELF_TRACING_ENABLED=true
        # Uncomment to enable debug logging
        # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
      ports:
        # Port used for the Zipkin UI and HTTP Api
        - 9411:9411
      depends_on:
        - kafka
